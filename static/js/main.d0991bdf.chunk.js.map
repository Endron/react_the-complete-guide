{"version":3,"sources":["TextLengthInput/TextLengthInputValidation.module.scss","App.module.scss","UserInput/UserInput.module.scss","UserOutput/UserOutput.module.scss","CharsComponent/CharComponent.module.scss","UserInput/UserInput.tsx","UserOutput/UserOutput.tsx","TextLengthInput/TextLenghtInputValidation.tsx","CharsComponent/CharComponent.tsx","CharsComponent/CharsComponent.tsx","TextLengthInput/TextLengthInput.tsx","App.tsx","serviceWorker.js","index.js"],"names":["module","exports","UserInput","className","cssStyles","style","type","onChange","this","props","handler","value","initialValue","Component","UserOutput","username","TextLengthInputValidation","text","length","min","isValid","valid","invalid","join","CharComponent","onClick","clickHandler","char","CharsComponent","string","index","chars","split","splice","map","key","updateTextHandler","newText","removeCharacter","TextLengthInput","state","inputChangedHandler","event","console","log","target","setState","App","changeUserNameHandler","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gIACAA,EAAOC,QAAU,CAAC,0BAA4B,6DAA6D,MAAQ,yCAAyC,QAAU,6C,kBCAtKD,EAAOC,QAAU,CAAC,IAAM,mB,gBCAxBD,EAAOC,QAAU,CAAC,UAAY,+B,gBCA9BD,EAAOC,QAAU,CAAC,WAAa,iC,gBCA/BD,EAAOC,QAAU,CAAC,cAAgB,uC,mMC0BnBC,E,uKAZP,OACI,yBAAKC,UAAWC,IAAUF,UAAWG,MAL3B,CACV,MAAS,QAKL,2BACIC,KAAK,OACLC,SAAUC,KAAKC,MAAMC,QACrBC,MAAOH,KAAKC,MAAMG,oB,GAZdC,a,iBCWTC,E,uKATP,OACI,yBAAKX,UAAWC,IAAUU,YACtB,oCAAUN,KAAKC,MAAMM,UACrB,0C,GANSF,a,gBCsBVG,E,wKAlBP,OAAOR,KAAKC,MAAMQ,KAAKC,QAAUV,KAAKC,MAAMU,M,+BAI5C,IAAMhB,EACFK,KAAKY,UACK,CAAChB,IAAUY,0BAA2BZ,IAAUiB,OAChD,CAACjB,IAAUY,0BAA2BZ,IAAUkB,SACxDL,EAAOT,KAAKY,UAAY,QAAU,UAExC,OACI,yBAAKjB,UAAWA,EAAUoB,KAAK,MAC3B,2BAAIN,Q,GAfoBJ,a,iBCWzBW,E,uKARP,OACI,yBAAKrB,UAAWC,IAAUoB,cAAeC,QAASjB,KAAKC,MAAMiB,cACxDlB,KAAKC,MAAMkB,U,GALAd,aCwCbe,E,8KAlCMC,EAAgBC,GAC7B,IAAMC,EAAQF,EAAOG,MAAM,IAG3B,OAFAD,EAAME,OAAOH,EAAO,GAEbC,EAAMR,KAAK,M,+BAGZ,IAAD,OACCQ,EAAQvB,KAAKC,MAAMQ,KAAKe,MAAM,IAExC,OACI,yBAAK7B,UAAU,kBAEP4B,EAAMG,KACF,SAACP,EAAMG,GASH,OACI,kBAAC,EAAD,CAAeK,IAAKL,EAAOH,KAAMA,EAAMD,aAR3B,WACZ,GAAG,EAAKjB,MAAM2B,kBAAmB,CAC7B,IAAMC,EAAU,EAAKC,gBAAgB,EAAK7B,MAAMQ,KAAMa,GACtD,EAAKrB,MAAM2B,kBAAkBC,e,GArBhCxB,aC0Bd0B,E,4MA5BXC,MAA8B,CAC1BvB,KAAM,I,EAGVwB,oBAAsB,SAACC,GACnBC,QAAQC,IAAIF,GAEZ,EAAKN,kBAAkBM,EAAMG,OAAOlC,Q,EAGxCyB,kBAAoB,SAACC,GACjB,EAAKS,SAAS,CACV7B,KAAMoB,K,uDAKV,OACI,yBAAKlC,UAAU,mBACX,2BAAOG,KAAK,OAAOC,SAAUC,KAAKiC,oBAAqB9B,MAAOH,KAAKgC,MAAMvB,OACzE,4CAAkBT,KAAKgC,MAAMvB,KAAKC,QAClC,kBAAC,EAAD,CAA2BD,KAAMT,KAAKgC,MAAMvB,KAAME,IAAK,IACvD,kBAAC,EAAD,CAAgBF,KAAMT,KAAKgC,MAAMvB,KAAMmB,kBAAmB5B,KAAK4B,yB,GAxBjDvB,aC6BfkC,E,4MAzBbP,MAAkB,CAChBzB,SAAU,S,EAGZiC,sBAAwB,SAACN,GACvB,EAAKI,SAAS,CACZ/B,SAAU2B,EAAMG,OAAOlC,S,uDAKzB,OACE,yBAAKR,UAAWC,IAAU2C,KACxB,kBAAC,EAAD,MACA,4BACA,4BACA,kBAAC,EAAD,CAAWrC,QAASF,KAAKwC,sBAAuBpC,aAAcJ,KAAKgC,MAAMzB,WACzE,kBAAC,EAAD,CAAYA,SAAUP,KAAKgC,MAAMzB,WACjC,kBAAC,EAAD,CAAYA,SAAUP,KAAKgC,MAAMzB,WACjC,kBAAC,EAAD,CAAYA,SAAUP,KAAKgC,MAAMzB,gB,GArBvBF,aCEEoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.d0991bdf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TextLengthInputValidation\":\"TextLengthInputValidation_TextLengthInputValidation__11JoQ\",\"valid\":\"TextLengthInputValidation_valid__25chR\",\"invalid\":\"TextLengthInputValidation_invalid__3A5xw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__15LM-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"UserInput\":\"UserInput_UserInput__3Hx_K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"UserOutput\":\"UserOutput_UserOutput__1Fxug\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CharComponent\":\"CharComponent_CharComponent__39RPC\"};","import React, {Component, EventHandler, ChangeEvent} from 'react';\nimport cssStyles from './UserInput.module.scss';\n\ninterface UserInputProperties {\n    readonly initialValue: string,\n    readonly handler?: EventHandler<ChangeEvent<HTMLInputElement>>\n}\n\nclass UserInput extends Component<UserInputProperties> {\n\n    render() {\n        const style = {\n            'width': '80%'\n        }\n    \n        return(\n            <div className={cssStyles.UserInput} style={style}>\n                <input \n                    type=\"text\" \n                    onChange={this.props.handler} \n                    value={this.props.initialValue}\n                />\n            </div>\n        );\n    }\n}\n\nexport default UserInput;\n","import React, {Component} from 'react';\nimport cssStyles from './UserOutput.module.scss'\n\ninterface UserOutputProperties {\n    readonly username: string\n}\n\nclass UserOutput extends Component<UserOutputProperties> {\n\n    render() {\n        return (\n            <div className={cssStyles.UserOutput}>\n                <p>User: {this.props.username}</p>\n                <p>second</p>\n            </div>\n        );\n    }\n}\n\nexport default UserOutput;\n","import React, {Component} from 'react';\nimport cssStyles from './TextLengthInputValidation.module.scss';\n\ninterface TextLengthInputValidationProperties {\n    text: string,\n    min: number\n}\n\nclass TextLengthInputValidation extends Component<TextLengthInputValidationProperties> {\n\n    isValid(): boolean {\n        return this.props.text.length >= this.props.min;\n    }\n\n    render() {\n        const className = \n            this.isValid()\n                    ? [cssStyles.TextLengthInputValidation, cssStyles.valid]\n                    : [cssStyles.TextLengthInputValidation, cssStyles.invalid];\n        const text = this.isValid() ? \"valid\" : \"invalid\";\n        \n        return (\n            <div className={className.join(' ')}>\n                <p>{text}</p>\n            </div>\n        );\n    }\n}\n\nexport default TextLengthInputValidation;\n","import React, {EventHandler, MouseEvent, Component} from 'react';\nimport cssStyles from './CharComponent.module.scss';\n\ninterface CharComponentProperties {\n    readonly char: string,\n    readonly clickHandler?: EventHandler<MouseEvent>\n}\n\nclass CharComponent extends Component<CharComponentProperties> {\n\n    render() {\n        return (\n            <div className={cssStyles.CharComponent} onClick={this.props.clickHandler}>\n                {this.props.char}\n            </div>\n        );\n    }\n}\n\nexport default CharComponent;\n","import React, {Component} from 'react';\nimport CharComponent from './CharComponent'\n\ninterface CharsComponentProperties {\n    readonly text: string,\n    readonly updateTextHandler?: UpdateTextHandler\n}\n\ninterface UpdateTextHandler {\n    (newValue: string) : void\n}\n\nclass CharsComponent extends Component<CharsComponentProperties> {\n\n     removeCharacter(string: string, index: number) {\n        const chars = string.split('');\n        chars.splice(index, 1);\n    \n        return chars.join('');\n    }\n\n    render() {\n        const chars = this.props.text.split('');\n\n    return (\n        <div className=\"CharsComponent\">\n            {\n                chars.map(\n                    (char, index) => {\n\n                        const handler = () => {\n                            if(this.props.updateTextHandler) {\n                                const newText = this.removeCharacter(this.props.text, index);\n                                this.props.updateTextHandler(newText);\n                            }\n                        }\n\n                        return (\n                            <CharComponent key={index} char={char} clickHandler={handler}/>\n                        );\n                    }\n                )\n            }\n        </div>\n    );\n    }\n}\n\nexport default CharsComponent;\n","import React, {Component, ChangeEvent} from 'react';\nimport TextLengthInputValidation from './TextLenghtInputValidation';\nimport CharsComponent from '../CharsComponent/CharsComponent';\n\ninterface TextLengthInputState {\n    readonly text: string\n}\n\nclass TextLengthInput extends Component<{}, TextLengthInputState> {\n\n    state: TextLengthInputState = {\n        text: \"\"\n    }\n\n    inputChangedHandler = (event: ChangeEvent<HTMLInputElement>) => {\n        console.log(event);\n\n        this.updateTextHandler(event.target.value)\n    }\n\n    updateTextHandler = (newText: string ) => {\n        this.setState({\n            text: newText\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"TextLengthInput\">\n                <input type=\"text\" onChange={this.inputChangedHandler} value={this.state.text}/>\n                <p>input length: {this.state.text.length}</p>\n                <TextLengthInputValidation text={this.state.text} min={5}/>\n                <CharsComponent text={this.state.text} updateTextHandler={this.updateTextHandler}/>\n            </div>\n        );\n    }\n}; \n\nexport default TextLengthInput;\n","import React, {Component, ChangeEvent} from 'react';\nimport cssStyles from'./App.module.scss';\nimport UserInput from './UserInput/UserInput';\nimport UserOutput from './UserOutput/UserOutput';\nimport TextLengthInput from './TextLengthInput/TextLengthInput';\n\ninterface AppState {\n  readonly username: string\n}\n\nclass App extends Component<{}, AppState> {\n\n  state: AppState = {\n    username: 'admin'\n  }\n\n  changeUserNameHandler = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      username: event.target.value\n    })\n  }\n\n  render() {\n    return (\n      <div className={cssStyles.App}>\n        <TextLengthInput/>\n        <p/>\n        <p/>\n        <UserInput handler={this.changeUserNameHandler} initialValue={this.state.username}/>\n        <UserOutput username={this.state.username}/>\n        <UserOutput username={this.state.username}/>\n        <UserOutput username={this.state.username}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}